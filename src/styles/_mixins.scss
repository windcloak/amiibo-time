@import "variables";



@mixin boxify($color: $body-bg, $padding: $spacer) {
	box-shadow: 0px 0px ($padding * 2) 0px rgba(lighten($color, 15%), 0.15) inset;
	background-color: $color;
	border-radius: $border-radius;
	border-width: 1px;
	border-color: lighten($color, 5%);
	border-top-color: lighten($color, 8%);
	border-style: solid;
	padding: $padding;
	margin: 0px;
	overflow: hidden;
}



@mixin shine($color: $body-color) {
	background-image: radial-gradient(ellipse at 50% -50%, rgba($color, 1), rgba($color, 0));
	border-top-color: lighten($color, 8%);
}



@mixin subtle($color: $body-color) {
	$shadow: darken($color, 50%);
	$stroke: lighten($color, 5%);

	text-shadow: 0.00em 0.00em 0.01em rgba($shadow, 0.6), 0.03em 0.02em 0.02em rgba($shadow, 0.4), 0.06em 0.04em 0.03em rgba($shadow, 0.2);
	-webkit-text-stroke: 0.01em $stroke;
	-moz-text-stroke: 0.01em $stroke;
	text-transform: uppercase;
	color: $color;
}



@mixin btn-icon($font-size: $font-size-base, $line-height: $input-btn-line-height, $padding-x: $input-btn-padding-x, $padding-y: $input-btn-padding-y) {
	$width: $font-size * $line-height;



	@extend .btn-block;
	line-height: normal;
	text-align: left;
	position: relative;
	padding-left: $width + ($padding-x * 2) + $padding-x;


	.fas, .fab {
		background-color: rgba($black, 0.1);
		border-right: 1px rgba($black, 0.1) solid;
		box-sizing: content-box;
		text-align: center;
		line-height: normal;
		font-size: $font-size;
		display: flex;
		justify-content: center;
		align-items: center;
		position: absolute;
		top: 0rem;
		right: auto;
		bottom: 0rem;
		left: 0rem;
		width: $width;
		padding: $padding-y $padding-x;
	}
}


// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
	$n: index($breakpoint-names, $name);
	@return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
  }
  
  // Minimum breakpoint width. Null for the smallest (first) breakpoint.
  //
  //    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    576px
  @function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min != 0, $min, null);
  }
  
  // Maximum breakpoint width. Null for the largest (last) breakpoint.
  // The maximum value is calculated as the minimum of the next one less 0.02px
  // to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
  // See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
  // Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
  // See https://bugs.webkit.org/show_bug.cgi?id=178261
  //
  //    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    767.98px
  @function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
	$next: breakpoint-next($name, $breakpoints);
	@return if($next, breakpoint-min($next, $breakpoints) - .02, null);
  }
  
  // Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
  // Useful for making responsive utilities.
  //
  //    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    ""  (Returns a blank string)
  //    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    "-sm"
  @function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
	@return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
  }
  
  // Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
  // Makes the @content apply to the given breakpoint and wider.
  @mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
	  @media (min-width: $min) {
		@content;
	  }
	} @else {
	  @content;
	}
  }
  
  // Media of at most the maximum breakpoint width. No query for the largest breakpoint.
  // Makes the @content apply to the given breakpoint and narrower.
  @mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
	$max: breakpoint-max($name, $breakpoints);
	@if $max {
	  @media (max-width: $max) {
		@content;
	  }
	} @else {
	  @content;
	}
  }
  
  // Media that spans multiple breakpoint widths.
  // Makes the @content apply between the min and max breakpoints
  @mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($lower, $breakpoints);
	$max: breakpoint-max($upper, $breakpoints);
  
	@if $min != null and $max != null {
	  @media (min-width: $min) and (max-width: $max) {
		@content;
	  }
	} @else if $max == null {
	  @include media-breakpoint-up($lower, $breakpoints) {
		@content;
	  }
	} @else if $min == null {
	  @include media-breakpoint-down($upper, $breakpoints) {
		@content;
	  }
	}
  }
  
  // Media between the breakpoint's minimum and maximum widths.
  // No minimum for the smallest breakpoint, and no maximum for the largest one.
  // Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
  @mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	$max: breakpoint-max($name, $breakpoints);
  
	@if $min != null and $max != null {
	  @media (min-width: $min) and (max-width: $max) {
		@content;
	  }
	} @else if $max == null {
	  @include media-breakpoint-up($name, $breakpoints) {
		@content;
	  }
	} @else if $min == null {
	  @include media-breakpoint-down($name, $breakpoints) {
		@content;
	  }
	}
  }
  